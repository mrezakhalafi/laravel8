===================================================================================================================================================

Note Laravel 8
M Reza Khalafi Notes 
20/03/2023

===================================================================================================================================================

Struktur 

1) app/Models/ = Model
2) app/Http/Controllers/ = Controller
3) public/ = Tempat menyimpan assets CSS, JS, IMG
4) resources/views/ = Views
5) routes/ = Routing
6) .env & composer.json (APP_ENV = local, production)

===================================================================================================================================================

<?= 1. Sintaks Blade ?>

    {{ nama }}
    Kalo ada tag html di dalamnya gunakan 
    {!! $post->body !!}

<?= 2. Layouting ?>

    Buat file utama pada views/layout dan taruh pada file template utamanya
    @yield('container')

    Taruh pada file replacablenya
    @extends('layouts/main') = Boleh pake / dan .
    @section('container')
        <h1>Halaman Home!</h1>
    @endsection

    Untuk pemisahan component bisa buat folder di views dan panggil dengan
    @include('partials.navbar')

<?= 3. Dump ?>

    @dd($blog_posts)

<?= 4. Foreach ?>

    @foreach ($posts as $post)
        <article>
            <h2>
                <a href="posts/{{ $post['slug'] }}">{{ $post['judul'] }}</a>
            </h2>
            <h5>{{ $post['author'] }}</h5>
            <p>{{ $post['body'] }}</p>
        </article>
    @endforeach

    Bisa juga pake $post->judul

<?= 5. Model ?>

    Bisa download extension Laravel Artisan lalu F1 dan ketik make Model 
    atau 
    Ketik di terminal php artisan make:model UserModel
    atau dengan migration (Database folder)
    artisan make:model -mfs UserModel (-m migration, -f factory, -s seeder)

    Format variabel = private static $blog_post
    Format class = public static function all()
    Return variabel = return self::$blog_post;
    Get return from function all() (For use in another function) = $posts = static::all();

<?= 6. Collection ?>

    Fungsi keren untuk manipulasi array seperti JS
    collect($array)

    $posts->first(); = Ambil array pertama
    $posts->firstWhere('slug',$slug); = Ambil array where

<?= 7. Controller ?>

    Bisa download extension Laravel Artisan lalu F1 dan ketik make Controller 
    atau 
    php artisan make:controller ControllerName

    Buat method sesuai dengan kebutuhan CRUD dan pindahkan return view dari routes kesini
    public function index()
    {
        return view('blog', [
            "name" => "M Reza Khalafi"
        ]);
    }

    Ubah return view di routes menjadi pemanggilan controller dan methodnya
    Route::get('/blog', [PostController::class, 'index']);
    

<?= 8. Migration ?>

    php artisan migrate
    Import semua DB pada database/migrations 
    php artisan migrate:rollback = Menghapus semua import tadi
    php artisan migrate:fresh = Menjalakan fungsi down() dan up() sekaligus (Update tabel)

<?= 9. DB ?>

    Buka database/migrations/
    Deklarasikan pada function up()
    $table->string('nama');
    $table->string('nama')->unique(); = Unique
    $table->string('nama')->default('Reza); = Dengan default 
    $table->timestamp('publish_at')->nullable() = Boleh kosong
    $table->foreignId('category_id') = Foreign key untuk Eloquent Relationship

<?= 10. Eloquent ORM (Tinker) ?>

    Fungsi untuk memetakan DB ke object
    Mengisi data dari terminal tanpa menyentuh DB Editor
    Tulis di terminal php artisan tinker
    
    Cara pertama :
    Lalu akan masuk ke shell, buat class disitu 
        $user = new App\Model\User
    Lalu isi classnya sesuai nama kolomnya
        $user->name = 'Leonardo Dicaprio'
        $user->email = 'Leonardo@gmail.com';
        $user->password = bcrypt('12345');
    Untuk save ke DB gunakan 
        $user->password = bcrypt('12345');
    Bisa menampilkan data dengan 
        $user->all();
    Juga spesifik data dengan 
        $user->find(2) = Cari dengan ID = 2
        $user->findOrFail(200) = Cari dengan ID yang tidak ada (Memunculkan Error)
        $user->first() = Cari data pertama
        $user->pluck('title') = Hanya tampilkan kolom title semua data
    Bisa begitu karena jika mengisi dari Tinker, akan otomatis menjadi collection

    Cara kedua :
    Post::create([
        'title' => 'Judul keempat',
        'excerp' => 'Subdetail artikel keempat',
        'body' => 'Isi konten yang panjang pokoknya.'
    ])
    Dengan syarat mengisi pada Model Post 
    protected $fillable = ['title', 'excerp', 'body']

<?= 11. Class 2 ?>

    protected $fillable = ['title', 'excerp', 'body'] = Field yang boleh di isi manual 
    protected $guarded = ['id'] = Field yang di jagain, gaboleh di isi manual

<?= 12. Update Model ?>

    Cara satu :
    Post::find(3)->update([
        "title" => "Judul ketiga berubah ya"
    ])
    Cara kedua :
    Post::where("title","Judul Ketiga")->update([
        "excerp" => "Excerp ketiga berubah ya"
    ])

<?= 13. Implict Binding ?>

    Mengubah mekanisme mencari detail bukan berdasarkan ID 
    Ubah di routes 
        Route::get('/posts/{post:slug}', [PostController::class, 'detail']);
    Kalo {post} aja dia mencari ID tapi kalo di tambahin {post:slug} akan mencari kolom slug 
    Ubah di controller 
    public function show(Post $post)
    {
        return view('posts', [
            "title" => "Single Post",
            "posts" => $post
        ]);
    }
    Gaperlu pake "posts" => Post::find($id) karena $post udah menjadi object dari Post

<?= 14. Eloquent Relationship ?>

    Penggabungan kedua tabel / model tanpa join seperti mySQL, menggunakan fitur disediakan Laravel

    OneToOne = 1 Postingan hanya punya 1 Category = belongsTo
    Buka model tabel utama, dan buat nama function tabel yang ingin di join
    class Post extends Model
    {
        function category(){
            $this->belongsTo(Category::class);
        }
    }
    Bisa diakses pada tinker sebagai 
    $post->category = Yang harusnya cuma return angka 1, jadi bisa menampilkan id 1, nama category dll, seperti left join 
    Bisa juga begini $post->category->name

    OneToMany = 1 Category bisa punya banyak Post 
    return $this->hasMany(Post::class);
    $category->$post = Kerennya join bisa dibalik, 1 category ini itu punya post apa aja

<?= 15. Seeder ?>

    Mengisi data dari laravel
    Posisi folder ada di /database/seeders/DatabaseSeeder.php
    php artisan make:seeder 
    Bikin datanya 
    Post::create([
        "title" => "Post 1",
        "slug" => "post-1",
        "category_id" => "1",
        "user_id" => "1",
        "excerp" => "Singkat 1",
        "body" => "Panjang 1"
    ])
    Tulis di terminal php artisan db:seed 
    Atau php artisan migrate:fresh --seed = Untuk drop semua tabel, create table, include datanya

<?= 16. Factory ?>

    Mengisi data fake lalu insert secara batch
    Posisi folder ada di /database/factories/
    php artisan make:factory PostFactory
    Masukan pada return di function definition
    return [
        "title" => $this->faker->sentence(mt_rand(2, 8)),
        "slug" => $this->faker->slug(),
        "excerp" => $this->faker->paragraph(),
        "body" => $this->faker->paragraph(mt_rand(5, 10)),
        "category_id" => 1,
        "user_id" => 1
    ];
    Ubah pada DatabaseSeeder
    User::factory(5)->create(); 5 = Jumlah data
    Bisa dijalankan dengan php artisan migrate:fresh --seed

    Ubah di config/app.php 'faker_locale' untuk merubah ke Local ID 
    Atau buat di .env menjadi 'faker_locale' => env('FAKER_LOCALE','us_US');
    Dan di .env = FAKER_LOCALE=id_ID

<?= 17. Sorting Data Terbaru ?>

    Ubah pada Controller
    "posts" => Post::latest()->get()

<?= 18. ?>


===================================================================================================================================================