===================================================================================================================================================

Note Laravel 8
M Reza Khalafi Notes 
20/03/2023

===================================================================================================================================================

Struktur 

1) app/Models/ = Model
2) app/Http/Controllers/ = Controller
3) public/ = Tempat menyimpan assets CSS, JS, IMG
4) resources/views/ = Views
5) routes/ = Routing
6) .env & composer.json (APP_ENV = local, production)

===================================================================================================================================================

<?= 1. Sintaks Blade ?>

    {{ nama }}
    Kalo ada tag html di dalamnya gunakan 
    {!! $post->body !!}

<?= 2. Layouting ?>

    Buat file utama pada views/layout dan taruh pada file template utamanya
    @yield('container')

    Taruh pada file replacablenya
    @extends('layouts/main') = Boleh pake / dan .
    @section('container')
        <h1>Halaman Home!</h1>
    @endsection

    Untuk pemisahan component bisa buat folder di views dan panggil dengan
    @include('partials.navbar')

<?= 3. Dump ?>

    @dd($blog_posts)

<?= 4. Foreach ?>

    @foreach ($posts as $post)
        <article>
            <h2>
                <a href="posts/{{ $post['slug'] }}">{{ $post['judul'] }}</a>
            </h2>
            <h5>{{ $post['author'] }}</h5>
            <p>{{ $post['body'] }}</p>
        </article>
    @endforeach

    Bisa juga pake $post->judul

<?= 5. Model ?>

    Bisa download extension Laravel Artisan lalu F1 dan ketik make Model 
    atau 
    Ketik di terminal php artisan make:model UserModel
    atau dengan migration (Database folder)
    artisan make:model -mfs UserModel (-m migration, -f factory, -s seeder)

    Format variabel = private static $blog_post
    Format class = public static function all()
    Return variabel = return self::$blog_post;
    Get return from function all() (For use in another function) = $posts = static::all();

<?= 6. Collection ?>

    Fungsi keren untuk manipulasi array seperti JS
    collect($array)

    $posts->first(); = Ambil array pertama
    $posts->firstWhere('slug',$slug); = Ambil array where

<?= 7. Controller ?>

    Bisa download extension Laravel Artisan lalu F1 dan ketik make Controller 
    atau 
    php artisan make:controller ControllerName

    Buat method sesuai dengan kebutuhan CRUD dan pindahkan return view dari routes kesini
    public function index()
    {
        return view('blog', [
            "name" => "M Reza Khalafi"
        ]);
    }

    Ubah return view di routes menjadi pemanggilan controller dan methodnya
    Route::get('/blog', [PostController::class, 'index']);
    

<?= 8. Migration ?>

    php artisan migrate
    Import semua DB pada database/migrations 
    php artisan migrate:rollback = Menghapus semua import tadi
    php artisan migrate:fresh = Menjalakan fungsi down() dan up() sekaligus (Update tabel)

<?= 9. DB ?>

    Buka database/migrations/
    Deklarasikan pada function up()
    $table->string('nama');
    $table->string('nama')->unique(); = Unique
    $table->string('nama')->default('Reza); = Dengan default 
    $table->timestamp('publish_at')->nullable() = Boleh kosong
    $table->foreignId('category_id') = Foreign key untuk Eloquent Relationship

<?= 10. Eloquent ORM (Tinker) ?>

    Fungsi untuk memetakan DB ke object
    Mengisi data dari terminal tanpa menyentuh DB Editor
    Tulis di terminal php artisan tinker
    
    Cara pertama :
    Lalu akan masuk ke shell, buat class disitu 
        $user = new App\Model\User
    Lalu isi classnya sesuai nama kolomnya
        $user->name = 'Leonardo Dicaprio'
        $user->email = 'Leonardo@gmail.com';
        $user->password = bcrypt('12345');
    Untuk save ke DB gunakan 
        $user->password = bcrypt('12345');
    Bisa menampilkan data dengan 
        $user->all();
    Juga spesifik data dengan 
        $user->find(2) = Cari dengan ID = 2
        $user->findOrFail(200) = Cari dengan ID yang tidak ada (Memunculkan Error)
        $user->first() = Cari data pertama
        $user->pluck('title') = Hanya tampilkan kolom title semua data
    Bisa begitu karena jika mengisi dari Tinker, akan otomatis menjadi collection

    Cara kedua :
    Post::create([
        'title' => 'Judul keempat',
        'excerp' => 'Subdetail artikel keempat',
        'body' => 'Isi konten yang panjang pokoknya.'
    ])
    Dengan syarat mengisi pada Model Post 
    protected $fillable = ['title', 'excerp', 'body']

<?= 11. Class 2 ?>

    protected $fillable = ['title', 'excerp', 'body'] = Field yang boleh di isi manual 
    protected $guarded = ['id'] = Field yang di jagain, gaboleh di isi manual

<?= 12. Update Model ?>

    Cara satu :
    Post::find(3)->update([
        "title" => "Judul ketiga berubah ya"
    ])
    Cara kedua :
    Post::where("title","Judul Ketiga")->update([
        "excerp" => "Excerp ketiga berubah ya"
    ])

<?= 13. Implict Binding ?>

    Mengubah mekanisme mencari detail bukan berdasarkan ID 
    Ubah di routes 
        Route::get('/posts/{post:slug}', [PostController::class, 'detail']);
    Kalo {post} aja dia mencari ID tapi kalo di tambahin {post:slug} akan mencari kolom slug 
    Ubah di controller 
    public function show(Post $post)
    {
        return view('posts', [
            "title" => "Single Post",
            "posts" => $post
        ]);
    }
    Gaperlu pake "posts" => Post::find($id) karena $post udah menjadi object dari Post

<?= 14. Eloquent Relationship ?>

    Penggabungan kedua tabel / model tanpa join seperti mySQL, menggunakan fitur disediakan Laravel

    OneToOne = 1 Postingan hanya punya 1 Category = belongsTo
    Buka model tabel utama, dan buat nama function tabel yang ingin di join
    class Post extends Model
    {
        function category(){
            $this->belongsTo(Category::class);
        }
    }
    FYI nama category akan mengambil category_id kalo ingin berbeda tambahkan script ini
        return $this->belongsTo(User::class, 'user_id');
    Bisa diakses pada tinker sebagai 
    $post->category = Yang harusnya cuma return angka 1, jadi bisa menampilkan id 1, nama category dll, seperti left join 
    Bisa juga begini $post->category->name

    OneToMany = 1 Category bisa punya banyak Post 
    return $this->hasMany(Post::class);
    $category->$post = Kerennya join bisa dibalik, 1 category ini itu punya post apa aja

<?= 15. Seeder ?>

    Mengisi data dari laravel
    Posisi folder ada di /database/seeders/DatabaseSeeder.php
    php artisan make:seeder 
    Bikin datanya 
    Post::create([
        "title" => "Post 1",
        "slug" => "post-1",
        "category_id" => "1",
        "user_id" => "1",
        "excerp" => "Singkat 1",
        "body" => "Panjang 1"
    ])
    Tulis di terminal php artisan db:seed 
    Atau php artisan migrate:fresh --seed = Untuk drop semua tabel, create table, include datanya

<?= 16. Factory ?>

    Mengisi data fake lalu insert secara batch
    Posisi folder ada di /database/factories/
    php artisan make:factory PostFactory
    Masukan pada return di function definition
    return [
        "title" => $this->faker->sentence(mt_rand(2, 8)),
        "slug" => $this->faker->slug(),
        "excerp" => $this->faker->paragraph(),
        "body" => $this->faker->paragraph(mt_rand(5, 10)),
        "category_id" => 1,
        "user_id" => 1
    ];
    Ubah pada DatabaseSeeder
    User::factory(5)->create(); 5 = Jumlah data
    Bisa dijalankan dengan php artisan migrate:fresh --seed

    Ubah di config/app.php 'faker_locale' untuk merubah ke Local ID 
    Atau buat di .env menjadi 'faker_locale' => env('FAKER_LOCALE','us_US');
    Dan di .env = FAKER_LOCALE=id_ID

<?= 17. Sorting Data Terbaru ?>

    Ubah pada Controller
    "posts" => Post::latest()->get()

<?= 18. Clockwork ?>

    Tools untuk tracing performance web dari sisi query dan lainnya
    Install di dalam project website laravel
        composer require itsgoingd/clockwork
    Install extension di chrome clockwork terus Inspect Element

<?= 19. Eiger Loading ?>

    Dalam kasus load Post dengan relasi Author dan Category 
    Maka akan ngeloop 3x query di 1 Post x jumlah Post
    Oleh karena itu tambahkan function with (['Array model yand di relasi']) 
    Agar cukup 3x query aja total
        "posts" => Post::with(['author', 'category'])->latest()->get()
    Atau bisa juga declare di model 
        protected $with = ['author', 'category'];
    Sehingga bisa begini saja 
        "posts" => Post::latest()->get()

<?= 20. Lazy Eiger Loading ?>

    Sama seperti Eiger Loading bedanya ini kasus untuk Implict Binding
    Yang loadnya bukan di controller, melainkan di routes 
        Route::get('/authors/{author:username}', function (User $author) {
    Tambahkan juga di setelah function ->load('Model yang direlasi')
        "posts" => $author->post->load('category', 'author')

<?= 21. If Else ?>

    @if ($posts->count() > 0)
    @elseif () 
    @else 
    @endif

<?= 22. Date ago (Carbon) ?>

    $posts[0]->created_at->diffForHumans()
    Result = 1 day ago

<?= 23. Unsplash Generate Image By Slug ?>

    <img src="https://source.unsplash.com/1200x400/?{{ $posts[0]->category->name }}" class="card-img-top" alt="...">

<?= 24. Foreach Skip ?>

    Loop semua kecuali index pertama 
    @foreach ($posts->skip(1) as $post)

<?= 25. Searching ?>

    Mengambil keyword dengan request('search') = Search adalah name
    Tulis pada controller 
    $posts = Post::latest(); = Deklarasikan di awal
    if (request('search')) {
            $posts->where('title', 'like', '%' . request('search') . '%')
                ->orWhere('body', 'like', '%' . request('search') . '%'); = Buat if kalo ada search/tidak
        }
    return view('post', [
        "posts" => $posts->get() = Tinggal get aja 
    ]);

<?= 26. Local Scopes ?>

    Agar filter dilakukan pada model dan bukan pada controller, controller hanya menangkap query, model yang filter
    Buat function pada model
    public function scopeFilter($query, array $filters)
    {
        // Return query
    }
    Dengan nama harus scopeFilter
    $query adalah search yang ditangkap dari controller dan $filters digunakan untuk fungsi No.27
    Lalu pada controller tambahkan dari "posts" => Post::latest()->get()
    Menjadi "posts" => Post::latest()->filter(request(['search']))->get()

<?= 27. When ?>

    Pengganti isset = fungsi dari Laravel
        $query->when($filters['search'] ?? false, function ($query, $search) {
            return $query->where('title', 'like', '%' . $search . '%')
                ->orWhere('body', 'like', '%' . $search . '%');
        });
    Ketika $filters['search'] gaada return false, kalo ada jalankan function dengan input $query dan   
    variabel baru $search replikasi dari $filters['search']


<?= 28. Double Search (WhereHas) ?>

    Mencari keyword dan category (In case buka list category, buka category 1, terus search, harus sesuai keyword dan category 1)
    Tambahkan pada controller $_GET yang mau ditangkap 
        "posts" => Post::latest()->filter(request(['search', 'category']))->get()
    Pada model fungsi scopeFilter tambahkan 
         $query->when($filters['category'] ?? false, function ($query, $category) {
            return $query->whereHas('category', function ($query) use ($category) {
                $query->where('slug', $category);
            });
        });
    Dengan pembacaan when() jika ada input category, dan whereHas() untuk mengecek apakah ada relasi Post ini dengan Category maka 
    tambahkan $query->where

    Atau pakai arrow function jadi gaperlu use ($category)
    $query->when($filters['author'] ?? false,fn ($query, $author) =>
        $query->whereHas('author', fn ($query) =>
            $query->where('username', $author)
        )
    );
    
<?= 29. Pagination ?>

    Pakai fungsi ->paginate(10) pada controller 
    "posts" => Post::latest()->filter(request(['search', 'category', 'author']))->paginate(7) = Untuk limit 7
    Untuk tombol paginatenya gunakan 
        {{ $posts->links() }}
    Desainnya menggunakan tailwind, kalo mau ubah ke Bootstrap bisa config lagi
    Ke file app/Providers/AppServiceProvider.php lalu tambahkan  
    {
        Paginator::useBootstrap();
    }
    Bisa bungkus dengan div links() nya untuk more customization

<?= 30. Link CSS ?>

    <link rel="stylesheet" href="/css/style.css">

<?= 31. CSRF Form ?>

    <form action="/register" method="POST">
        @csrf
    </form

<?= 32. Mengambil Data Dari Form ?>

    Buat form yang mengarah ke dirinya sendiri tapi dengan method POST 
    Buat routes di controller 
    Bisa gunakan return request()->all();
    Atau 
    public function store(Request $request)
    {
        return $request->all();
    }

<?= 33. Form Validate ?>

    $request->validate([
        'name' => 'required|max:255', = Bisa bentuk pipeline
        'username' => ['required', 'min:3', 'max:255', 'unique:users'], = Bisa bentuk array
        'email' => 'required|email:dns|unique:users', = Email:ds artinya dengan format @ nya
        'password' => 'required|min:5|max:255'
    ]);
    Tulis fungsi jika lolos validasi di bawahnya (Tidak akan lanjut jika validasi gagal)

<?= 34. Show Validate Error ?>

    Untuk alert merah pada input 
        class="form-control rounded-top @error('name') is-invalid @enderror"
    Untuk menampilkan pesan error 
        @error('name')
            <div class="invalid-feedback">
                {{ $message }}
            </div>
        @enderror

<?= 35. Show Old Value ?>

    <input type="text" name="name" value="{{ old('email')}}">

<?= 36. Insert Data To DB ?>

    Import dulu 
        use App\Models\User;
    Masukan semua validasi ke $validatedData
    Jangan lupa untuk menambahkan kolom ke Modal User pada $fillable atau #guarded
    Insert dengan 
        User::create($validatedData);
    Lalu return jika berhasil 
        return redirect('/login');

    Untuk mengubah isi seperti ingin validasi dulu bisa taruh di sebelum ::create 
        $validatedData['password'] = bcrypt($validatedData['password']);

<?= 37. Password Encrypt ?>

    Bisa 
        $validatedData['password'] = bcrypt($validatedData['password']);
    Atau pakai fungsi laravel 
        $validatedData['password'] = Hash::make($validatedData['password']);
    Tapi harus import dulu 
        use Illuminate\Support\Facades\Hash;

<?= 38. Flashdata ?>

    Sebelum return bisa tulis 
        $request->session()->flash('success', 'Registration successfull! Please login');
    Atau langsung di return nya 
        return redirect('/login')->with('success', 'Registration successfull! Please login');
    Lalu tampilkan dengan 
        @if (session()->has('success'))
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                {{ session('success')}}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        @endif

<?= 39. Login ?>

    Gunakan Auth dahulu
        use Illuminate\Support\Facades\Auth;
    Login dengan 
        if (Auth::attempt($credentials)) {
            $request->session()->regenerate(); = Menghindari pura2 masuk dengan session yang sama
            return redirect()->intended('/dashboard'); = Agar melewati middlewarenya
        }
    Dimana $credential adalah array dari validasi
    Dan jika gagal login arahkan di bawahnya dengan 
        return back()->with('loginError', 'Login Failed!');
    Agar bisa ditampilkan flashmessage di HTML nya 

<?= 40. Middleware Authentication ?>

    Filter http request sebelum dijalankan (Sebelum route)

    Gunakan di web.php 
    Route::get('/login', [LoginController::class, 'index'])->middleware('guest');
    Guest = Tidak Login, Auth = login
    Bisa dilihat dan diganti di Http/Kernel.php bagian protected $routeMiddleware

    Merubah redirect jika tidak memenuhi syarat ada di Providers/RouteServiceProvider.php 
    Ganti public const HOME = '/';

<?= 41. Middleware Using in HTML ?>

    Section jika middleware auth terpenuhi (Sudah login) maka akan tampil yang atas, jika belum login tampil yang bawah
    @auth 
        <h1>Welcome Back, {{ auth()->user()->name }}</h1>
    @else 
        <button>Login</button>
    @endauth
    auth()->user()->name = Untuk menampilkan namanya

<?= 42. Logout ?>

    Jadikan tombol logout sebagai form 
        <form action="/logout" method="POST">
            @csrf
            <button type="submit" class="dropdown-item"><i class="bi bi-box-arrow-right"></i>Logout</button>
        </form>
    Buat function logout di Controller dan ketikan 
        Auth::logout();
        request()->session()->invalidate();
        request()->session()->regenerateToken();
        return redirect('/'); = 4 baris template dari dokumentasi resmi Laravel

<?= 43. Default redirect Middleware ?>

    Jika terdapat error (/login) itu karena tidak memenuhi syarat middleware Auth (Khusus Auth), secara default diarahkan pada 
        App/Http/Middleware/Authenticate.php baris return route('login');
    Untuk mengubahnya tambahkan ->name('login') pada web.php
        Route::get('/login', [LoginController::class, 'index'])->name('login')->middleware('guest');
    
<?= 44. Feather Icons ?>

    <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js" integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE" crossorigin="anonymous"></script>
    <span data-feather="file-text"></span>

<?= 45. Resource Controllers ?>

    Tekan F1 dan ketikan Artisan : Make Controller 
    Tapi pilih yang Type = Resource 
    Dan reference Model masukan nama Model yang di inginkan

    Nanti akan terbentuk 1 controller dengan CRUD di dalamnya
    Sehingga di web.php bisa dipanggil dengan 
        Route::resource('/dashboard/posts', DashboardPostController::class)->middleware('auth');
    Akan otomatis mencari fungsi index() seperti CI

    Otomatis detect, method get = index, method post = store dll

<?= 46. Navbar Active Link ?>

    <a class="nav-link {{ Request::is('dashboard/posts') ? 'active' : '' }}" href="/dashboard/posts">
    Dengan pembacaan, jika URL nya adalah dashboard/posts maka tampilkan class active
    Jadi tidak perlu mengirim data dari controller

    Tambahkan * pada Request::is('dashboard/posts*') untuk apapun halaman setelah posts akan tetap active
    Contoh posts/create, posts/edit

<?= 47. Loop Variable ?>

    Variabel di dalam foreach untuk mengetahui posisi 
        <td> {{ $loop->iteration }} </td> = Dimulai dari 1
        <td> {{ $loop->index }} </td> = Dimulai dari 0
    Selebihnya banyak ada di dokumentasi

<?= 48. Resource Controllers Problem Handle ?>

    Untuk handle masalah ketika menggunakan Route::resource() maka tidak bisa menggunakan Route::resource('/dashboard/posts/{post:slug}');
    Karena di dalamnya sudah ada CRUD default 
    Maka buat fungsi baru pada Class 
    public function getRouteKeyName()
    {
        return 'slug';
    }
    Hasilnya otomatis ketika membuka URL ('dashboard/posts/) apapun itu (CRUD) akan selalu menyertakan slug

<?= 49. Eloquent Sluggable ?>

    Membuat slug otomatis 
    Install dari github resminya composer require cviebrock/eloquent-sluggable ^8.0 (Manual menyesuaikan versi)
    Masuk ke Class Post dan declare 
        use Cviebrock\EloquentSluggable\Sluggable;
    Lalu use pada Class 
        use Sluggable;
    Lalu buat function
         public function sluggable(): array{
            return [
                'slug' => [
                    'source' => 'title' = Input title yang mau dijadikan slug
                ]
            ];
        } 

    Lalu masuk ke Controller dan declare 
        use \Cviebrock\EloquentSluggable\Services\SlugService;
    Lalu buat functionnya 
         public function checkSlug(Request $request)
        {
            $slug = SlugService::createSlug(Post::class, 'slug', $request->title); = Mengambil title 
            return response()->json(['slug' => $slug]); = Return dalam format JSON agar bisa dibaca nanti 
        }

    Lalu tambahkan route pada web.php 
        Route::get('/dashboard/posts/checkSlug', [DashboardPostController::class, 'checkSlug'])->middleware('auth');

    Lalu masuk ke view dan buat script seperti ini 
        const title = document.querySelector('#title');
        const slug = document.querySelector('#slug');

        title.addEventListener('change', function(){
            fetch('/dashboard/posts/checkSlug?title='+title.value) = Fetch ke controller, dan mendapat return JSON
            .then(response => response.json()
            .then(data => slug.value = data.slug));
        })

<?= 50. Trix Editor ?>

    Editor keren kayak word untuk web browser 
    Include dulu src nya 
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/trix@2.0.0/dist/trix.css">
        <script type="text/javascript" src="https://unpkg.com/trix@2.0.0/dist/trix.umd.min.js"></script>
    Lalu gunakan dengan 
        <input id="body" type="hidden" name="body">
        <trix-editor input="body"></trix-editor>
    Dengan trix-editor input="" harus sama dengan id="" pada input

    Untuk disable file input gunakan style 
        trix-toolbar [data-trix-button-group="file-tools"]{
            display: none;
        }
    Dan JS nya 
        document.addEventListener('trix-file-accept',function(e){
            e.preventDefault();
        })


<?= 51. Limit String ?>

    Include dulu 
        use Illuminate\Support\Str;
    Gunakan dengan 
        $validateData['excerp'] = Str::limit($request->body, 100, '...');

<?= 52. ?>

===================================================================================================================================================